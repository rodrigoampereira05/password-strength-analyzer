# Main.py - Technical Documentation

## Overview
The `main.py` file serves as the command-line interface for the Password Strength Analyzer. It provides multiple analysis modes, rich formatting, and batch processing capabilities.

## Dependencies
- `argparse`: For parsing command-line arguments
- `colorama`: For cross-platform colored terminal output
- `rich`: For enhanced terminal formatting and tables
- `json`: For JSON output formatting
- `pathlib`: For file path handling
- `src.analyzer.password_analyzer`: Custom module for password analysis

## Functions

### get_strength_color(strength: str) -> str
Maps password strength levels to appropriate colors for visual feedback.

**Parameters:**
- `strength`: String representing password strength ("Weak", "Moderate", "Strong")

**Returns:**
- Color code from colorama.Fore corresponding to the strength level
- Weak: Red
- Moderate: Yellow
- Strong: Green
- Default: White

### get_strength_emoji(strength: str) -> str
Provides emoji indicators for password strength levels.

**Parameters:**
- `strength`: String representing password strength

**Returns:**
- Appropriate emoji for the strength level
- Weak: ❌
- Moderate: ⚠️
- Strong: ✅
- Default: ❓

### analyze_multiple_passwords(passwords: List[str], analyzer: PasswordAnalyzer) -> List[Dict]
Processes multiple passwords with progress indication.

**Parameters:**
- `passwords`: List of password strings to analyze
- `analyzer`: PasswordAnalyzer instance

**Returns:**
- List of dictionaries containing analysis results for each password

### print_table_output(result: Dict, password: str)
Formats and displays analysis results in a rich formatted table.

**Parameters:**
- `result`: Dictionary containing analysis results
- `password`: The password being analyzed

**Output Format:**
- Formatted table with strength indicators
- Color-coded metrics
- Character count breakdown
- Improvement suggestions

### main()
The primary function that handles the command-line interface and program flow.

## Command-Line Arguments

### Required Arguments (at least one of):
- `password`: One or more passwords to analyze
- `-f, --file`: File containing passwords (one per line)

### Optional Arguments
- `-j, --json`: Output results in JSON format
- `-s, --silent`: Show only basic results without formatting
- `-v, --verbose`: Show detailed analysis
- `-h, --help`: Show help message and exit

## Output Formats

### Rich Table Output (Default)
```
┌──────────────┬─────────────┐
│ Metric       │ Value       │
├──────────────┼─────────────┤
│ Strength     │ Strong ✅   │
│ Score        │ 8.5/10     │
│ Characters   │ Upper: 1    │
│              │ Lower: 5    │
│              │ Numbers: 2  │
└──────────────┴─────────────┘
```

### Silent Output
```
password: Strong (8.5/10)
```

### JSON Output
```json
{
  "password": "example",
  "analysis": {
    "strength": "Strong",
    "score": 8.5,
    "feedback": [],
    "details": {
      "length_score": 4,
      "complexity_score": 4.5,
      "character_counts": {
        "uppercase": 1,
        "lowercase": 5,
        "numbers": 2,
        "special": 1
      }
    }
  }
}
```

## Visual Features
- Progress spinner for batch processing
- Color-coded strength indicators
- Unicode emojis for visual feedback
- Rich formatted tables
- Character count visualization

## Usage Examples

### Single Password Analysis
```bash
python main.py "mypassword123"
```

### Multiple Passwords
```bash
python main.py "pass1" "pass2" "pass3"
```

### File Input
```bash
python main.py -f passwords.txt
```

### JSON Output
```bash
python main.py "mypassword" --json
```

### Silent Mode
```bash
python main.py "mypassword" --silent
```

## Error Handling
- Invalid file paths
- Empty password lists
- JSON formatting errors
- Progress bar interruption
- Color support verification

## Future Improvements
- Export to additional formats (CSV, HTML)
- Enhanced statistical analysis
- Password similarity comparison
- Custom strength criteria configuration
- Batch processing optimization